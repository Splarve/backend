{
  "info": {
    "name": "Job Posts API Tests (Workspace)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Job Posts (Workspace: {{orgHandle}})",
      "item": [
        {
          "name": "Get All Job Posts for Workspace",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ]
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Response is an array\", () => { pm.expect(Array.isArray(pm.response.json())).to.be.true; });",
                  "",
                  "pm.test(\"Job posts have required fields (new schema)\", () => {",
                  "    const jobs = pm.response.json();",
                  "    if (jobs.length > 0) {",
                  "        const job = jobs[0];",
                  "        pm.expect(job).to.have.property('job_info_id');",
                  "        pm.expect(job).to.have.property('org_id');",
                  "        pm.expect(job).to.have.property('department_id');",
                  "        pm.expect(job).to.have.property('job_title');",
                  "        pm.expect(job).to.have.property('job_description');",
                  "        pm.expect(job).to.have.property('location');",
                  "        pm.expect(job).to.have.property('employment_type');",
                  "        pm.expect(job).to.have.property('salary');",
                  "        pm.expect(job).to.have.property('tags');",
                  "        pm.expect(Array.isArray(job.tags)).to.be.true;",
                  "        pm.expect(job).to.have.property('citizenship_requirements');",
                  "        pm.expect(Array.isArray(job.citizenship_requirements)).to.be.true;",
                  "        pm.expect(job).to.have.property('education_level');",
                  "        pm.expect(Array.isArray(job.education_level)).to.be.true;",
                  "        pm.expect(job).to.have.property('comp_specific_label');",
                  "        pm.expect(Array.isArray(job.comp_specific_label)).to.be.true;",
                  "        pm.expect(job).to.have.property('status');",
                  "        pm.expect(job).to.have.property('applicant_count');",
                  "        pm.expect(job).to.have.property('created_at');",
                  "        pm.expect(job).to.have.property('updated_at');",
                  "        pm.environment.set(\"jobId\", job.job_info_id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Job Post by ID (Workspace)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts/{{existingJobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts", "{{existingJobId}}"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ]
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Response has expected properties (new schema)\", () => {",
                  "    const job = pm.response.json();",
                  "    pm.expect(job).to.have.property('job_info_id');",
                  "    pm.expect(job.job_info_id).to.eql(pm.environment.get(\"existingJobId\"));",
                  "    pm.expect(job).to.have.property('org_id');",
                  "    pm.expect(job).to.have.property('department_id');",
                  "    pm.expect(job).to.have.property('job_title');",
                  "    pm.expect(job).to.have.property('job_description');",
                  "    pm.expect(job).to.have.property('location');",
                  "    pm.expect(job).to.have.property('employment_type');",
                  "    pm.expect(job).to.have.property('salary');",
                  "    pm.expect(job).to.have.property('tags');",
                  "    pm.expect(Array.isArray(job.tags)).to.be.true;",
                  "    pm.expect(job).to.have.property('citizenship_requirements');",
                  "    pm.expect(Array.isArray(job.citizenship_requirements)).to.be.true;",
                  "    pm.expect(job).to.have.property('education_level');",
                  "    pm.expect(Array.isArray(job.education_level)).to.be.true;",
                  "    pm.expect(job).to.have.property('comp_specific_label');",
                  "    pm.expect(Array.isArray(job.comp_specific_label)).to.be.true;",
                  "    pm.expect(job).to.have.property('status');",
                  "    pm.expect(job).to.have.property('applicant_count');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Job Post (Workspace)",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"department_id\": \"{{departmentId}}\",\n    \"job_title\": \"Senior Backend Developer (Workspace Test)\",\n    \"job_description\": \"We are looking for an experienced backend developer for workspace {{orgHandle}}.\",\n    \"location\": \"Remote / San Francisco\",\n    \"employment_type\": \"Full-time\",\n    \"salary\": \"$120k - $160k\",\n    \"tags\": [\"node.js\", \"typescript\", \"express\", \"supabase\"],\n    \"citizenship_requirements\": [\"H1B\", \"Citizen\"],\n    \"education_level\": [\"Bachelors\"],\n    \"comp_specific_label\": [\"Engineering Team\", \"Backend Squad\"],\n    \"status\": \"published\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", () => { pm.response.to.have.status(201); });",
                  "",
                  "pm.test(\"Response has expected properties (new schema)\", () => {",
                  "    const job = pm.response.json();",
                  "    pm.expect(job).to.have.property('job_info_id');",
                  "    pm.expect(job).to.have.property('org_id');",
                  "    pm.expect(job).to.have.property('department_id', pm.environment.get(\"departmentId\"));",
                  "    pm.expect(job).to.have.property('job_title', \"Senior Backend Developer (Workspace Test)\");",
                  "    pm.expect(job).to.have.property('employment_type', \"Full-time\");",
                  "    pm.expect(Array.isArray(job.comp_specific_label)).to.be.true;",
                  "    pm.expect(job.comp_specific_label).to.include(\"Backend Squad\");",
                  "    pm.expect(job).to.have.property('status', \"published\");",
                  "    pm.environment.set(\"createdJobId\", job.job_info_id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Job Post (Workspace)",
          "request": {
            "method": "PUT",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts/{{createdJobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts", "{{createdJobId}}"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"job_title\": \"Senior Backend Developer (Workspace Updated)\",\n    \"salary\": \"$130k - $170k\",\n    \"status\": \"draft\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Job post was updated correctly (new schema)\", () => {",
                  "    const job = pm.response.json();",
                  "    pm.expect(job.job_title).to.eql(\"Senior Backend Developer (Workspace Updated)\");",
                  "    pm.expect(job.salary).to.eql(\"$130k - $170k\");",
                  "    pm.expect(job.status).to.eql(\"draft\");",
                  "    pm.expect(job.job_info_id).to.eql(pm.environment.get(\"createdJobId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Job Post (Workspace)",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts/{{createdJobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts", "{{createdJobId}}"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ]
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Correct job post was deleted\", () => {",
                  "    const job = pm.response.json();",
                  "    pm.expect(job.job_info_id).to.eql(pm.environment.get(\"createdJobId\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation Error - Create Job Post (Missing Department)",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"job_title\": \"No Dept Title\",\n    \"job_description\": \"This should fail validation\",\n    \"location\": \"Nowhere\",\n    \"employment_type\": \"Full-time\",\n    \"salary\": \"$1\",\n    \"tags\": [\"fail\"],\n    \"citizenship_requirements\": [\"Any\"],\n    \"education_level\": [\"Any\"],\n    \"comp_specific_label\": [\"Failure Inc\"]\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => { pm.response.to.have.status(400); });",
                  "",
                  "pm.test(\"Response indicates validation error\", () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('details');",
                  "    pm.expect(jsonData.error).to.eql('Body validation failed');",
                  "    pm.expect(JSON.stringify(jsonData.details)).to.include('department_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Invalid Job ID Parameter (Workspace)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts/not-a-valid-uuid",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts", "not-a-valid-uuid"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ]
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Expect 400 from Zod validation middleware",
                  "pm.test(\"Status code is 400\", () => { pm.response.to.have.status(400); });",
                  "",
                  "pm.test(\"Response indicates parameter validation error\", () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.eql('URL parameter validation failed');",
                  "    pm.expect(JSON.stringify(jsonData.details)).to.include('jobId');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Invalid Organization Handle Parameter",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/INVALID_HANDLE*/job-posts",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "INVALID_HANDLE*", "job-posts"]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ]
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                   "// Expect 400 from Zod validation middleware for org_handle format",
                  "pm.test(\"Status code is 400\", () => { pm.response.to.have.status(400); });",
                  "",
                  "pm.test(\"Response indicates parameter validation error\", () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.eql('URL parameter validation failed');",
                  "    pm.expect(JSON.stringify(jsonData.details)).to.include('org_handle');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Full Text Search - Basic Query (Workspace)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts/search?q=engineer",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts", "search"],
              "query": [
                { "key": "q", "value": "engineer" }
              ]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ]
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Response is an array\", () => { pm.expect(Array.isArray(pm.response.json())).to.be.true; });",
                  "// Add more specific tests if needed, e.g., check if results belong to the orgHandle"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Full Text Search - Empty Query (Workspace Validation)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/job-posts/search?q=",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "job-posts", "search"],
              "query": [
                { "key": "q", "value": "" }
              ]
            },
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ]
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", () => { pm.response.to.have.status(400); });",
                  "pm.test(\"Error message for empty/invalid query\", () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.eql('Query parameter validation failed');",
                  "    pm.expect(JSON.stringify(jsonData.details)).to.include('too short');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "orgId",
      "value": "11111111-1111-1111-1111-111111111111"
    },
    {
      "key": "existingJobId",
      "value": "44444444-4444-4444-4444-444444444444"
    }
  ]
}