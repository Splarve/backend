{
  "info": {
    "name": "Organization Settings API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Organization Settings (Workspace: {{orgHandle}})",
      "item": [
        {
          "name": "Get Organization Settings",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Response has expected settings fields\", () => {",
                  "    const settings = pm.response.json();",
                  "    pm.expect(settings).to.have.property('org_id');",
                  "    pm.expect(settings).to.have.property('org_name');",
                  "    pm.expect(settings).to.have.property('org_handle', pm.environment.get(\"orgHandle\"));",
                  "    pm.expect(settings).to.have.property('org_description');",
                  "    pm.expect(settings).to.have.property('org_logo');",
                  "    pm.expect(settings).to.have.property('org_industry');",
                  "    pm.expect(settings).to.have.property('org_location');",
                  "    pm.expect(settings).to.have.property('website');",
                  "",
                  "    // Save current name for comparison after update attempt",
                  "    pm.environment.set(\"originalOrgName\", settings.org_name);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "settings"]
            }
          },
          "response": []
        },
        {
          "name": "Update Organization Settings",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate dynamic data for update test",
                  "const timestamp = new Date().getTime();",
                  "pm.environment.set(\"updatedOrgName\", `Test Org Name ${timestamp}`);",
                  "pm.environment.set(\"updatedOrgDesc\", `Test description updated at ${timestamp}`);",
                  "pm.environment.set(\"updatedWebsite\", `https://updated.example.com/${timestamp}`);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Response reflects updated settings\", () => {",
                  "    const settings = pm.response.json();",
                  "    pm.expect(settings.org_name).to.eql(pm.environment.get(\"updatedOrgName\"));",
                  "    pm.expect(settings.org_description).to.eql(pm.environment.get(\"updatedOrgDesc\"));",
                  "    pm.expect(settings.website).to.eql(pm.environment.get(\"updatedWebsite\"));",
                  "    pm.expect(settings.org_handle).to.eql(pm.environment.get(\"orgHandle\")); // Handle should not change",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "options": { "raw": { "language": "json" } },
              "raw": "{\n    \"org_name\": \"{{updatedOrgName}}\",\n    \"org_description\": \"{{updatedOrgDesc}}\",\n    \"website\": \"{{updatedWebsite}}\",\n    \"org_industry\": \"Testing\" \n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "settings"]
            }
          },
          "response": []
        },
        {
          "name": "Get Organization Settings (Verify Update)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => { pm.response.to.have.status(200); });",
                  "",
                  "pm.test(\"Settings correctly updated\", () => {",
                  "    const settings = pm.response.json();",
                  "    pm.expect(settings.org_name).to.eql(pm.environment.get(\"updatedOrgName\"));",
                  "    pm.expect(settings.org_description).to.eql(pm.environment.get(\"updatedOrgDesc\"));",
                  "    pm.expect(settings.website).to.eql(pm.environment.get(\"updatedWebsite\"));",
                  "    pm.expect(settings.org_industry).to.eql(\"Testing\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "settings"]
            }
          },
          "response": []
        },
        {
          "name": "Validation Error - Update Settings (Invalid URL)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", () => { pm.response.to.have.status(400); });",
                  "",
                  "pm.test(\"Response indicates validation error for website\", () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error', 'Body validation failed');",
                  "    pm.expect(jsonData).to.have.property('details');",
                  "    pm.expect(JSON.stringify(jsonData.details)).to.include('website');",
                  "    pm.expect(JSON.stringify(jsonData.details)).to.include('Invalid url');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "options": { "raw": { "language": "json" } },
              "raw": "{\n    \"website\": \"not-a-valid-url\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "settings"]
            }
          },
          "response": []
        },
        {
          "name": "Validation Error - Update Settings (Empty Body)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "options": { "raw": { "language": "json" } },
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/workspaces/{{orgHandle}}/settings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "workspaces", "{{orgHandle}}", "settings"]
            }
          },
           "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404 (No Changes Detected)\", () => { pm.response.to.have.status(404); });",
                   "pm.test(\"Error message indicates no changes\", () => {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('no changes detected');",
                  "});"
                ]
              }
            }
          ],
          "response": []
        }
      ]
    }
  ],
  "variable": []
} 